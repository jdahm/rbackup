#!/usr/bin/env bash

last_backup_file=/usr/local/share/backup/last_backups.dat
log_file=/usr/local/share/backup/backup.log
rconf=/etc/rsnapshot.conf
rsnapshot=/usr/bin/rsnapshot

echo_log() {
    echo $(date): $* >> $log_file
}

if [ ! -f $rconf ]; then
    echo_log "$rconf does not exist. Exiting..."
    exit 1
fi

if [ ! -f $last_backup_file ]; then
    echo "# The values below are overwritten when backing up." > $last_backup_file
fi

snapshot_root=$(awk '/^snapshot_root/{print $2}' < $rconf)

if [ ! -d $snapshot_root ]; then
    echo_log "$snapshot_root does not exist. Exiting..."
    exit 1
fi

intervals=( $(awk '/^interval|^retain/{print $2}' < $rconf) )

get_time() {
    echo $(date +%s)
}

update_time() {
    new_line="$1 $(get_time)"
    line=$(grep $1 $last_backup_file)
    if [ -n "$line" ]; then
        sed -i 's/${1}.*$/${new_line}/' $last_backup_file
    else
        echo $new_line >> $last_backup_file
    fi
}

get_last_time() {
    line=$(grep $1 $last_backup_file)
    if [ -n "$line" ]; then
        time=$(awk '{ print $2 }' <<< "$line")
    else
        time=0
    fi
    echo $time
}

get_interval() {
    hourly=$(echo "60*60" | bc)
    daily=$(echo "${hourly}*24" | bc)
    weekly=$(echo "${daily}*7" | bc)
    monthly=$(echo "${daily}*30" | bc)
    if [ $1 = "hourly" ]; then
        echo $hourly
    elif [ $1 = "daily" ]; then
        echo $daily
    elif [ $1 = "weekly" ]; then
        echo $weekly
    elif [ $1 = "monthly" ]; then
        echo $monthly
    else
        echo "Unknown interval"
        exit 1
    fi
}

for i in "${intervals[@]}"; do
    interval_time=$(get_interval $i)
    last_backup_time=$(get_last_time $i)
    current_time=$(get_time)
    if [ $(($current_time-$last_backup_time)) -gt $interval_time ]; then
        echo_log last $i was $(date -d "@${last_backup_time}"), backing up now
        $rsnapshot -c $rconf $i
        update_time $i
    fi
done
