#!/usr/bin/env bash

echo_error() {
    echo "$*. Exiting..."
    exit 1
}

get_time() {
    echo $(date +%s)
}

get_interval() {
    hourly=$(echo "60*60" | bc)
    daily=$(echo "${hourly}*24" | bc)
    weekly=$(echo "${daily}*7" | bc)
    monthly=$(echo "${daily}*30" | bc)
    if [ $1 = "hourly" ]; then
        echo $hourly
    elif [ $1 = "daily" ]; then
        echo $daily
    elif [ $1 = "weekly" ]; then
        echo $weekly
    elif [ $1 = "monthly" ]; then
        echo $monthly
    else
        echo "Unknown interval"
        exit 1
    fi
}

# Default values
conf=/etc/rsnapshot.conf
rsnapshot=/usr/bin/rsnapshot
datfile=
logfile=

# Parse arguments to script
while [[ $1 ]]; do
    case $1 in
        -c) conf=$2; shift 2;;
        -r) rsnapshot=$2; shift 2;;
        -d) datfile=$2; shift 2;;
        -l) logfile=$2; shift 2;;
        *) ;;
    esac
done

# Check inputs
[ ! -r "$conf" ] && echo_error "$conf" is not readable

# Get an option from the conf file
get_option() {
    grep -E "^[[:space:]]*$1" $conf | awk '{ print $2 }'
}

# Get snapshot root (Cannot contain spaces!)
root=$(get_option snapshot_root)
[ ! -d "$root" ] && echo_error $root does not exist

# Assign default dat and log file locations if not already specified
[ -z "${datfile}" ] && datfile="${root}"/rbackup.dat
[ -z "${logfile}" ] && logfile="${root}"/rbackup.log

echo_log() {
    echo $(date): "$*" >> $logfile
}

update_time() {
    newdat="$1 $(get_time) # $(date)"
    line=$(grep "$1" "$datfile")
    if [ -n "$line" ]; then
        sed -i "s/${1}.*$/${newdat}/" "$datfile"
    else
        echo "$newdat" >> "$datfile"
    fi
}

get_last_time() {
    line=$(grep $1 "$datfile")
    if [ -n "$line" ]; then
        echo $(awk '{ print $2 }' <<< "$line")
    else
        echo 0
    fi
}

# Begin a new datfile if necessary
if [ ! -f "$datfile" ]; then
    echo "# The values below are overwritten when backing up." > $datfile
fi

# Get intervals
intervals=( $(awk '/^interval|^retain/{print $2}' < "$conf") )
[ "${#intervals[@]}" -eq 0 ] && echo_error No intervals detected

# Exit if rsnapshot is not executable (cannot backup!)
[ ! -x $rsnapshot ] && echo_error $rsnapshot is not executable

# Loop over intervals and backup if necessary
for i in "${intervals[@]}"; do
    interval_time=$(get_interval $i)
    last_backup_time=$(get_last_time $i)
    current_time=$(get_time)
    if [ $(($current_time - $last_backup_time)) -ge $interval_time ]; then
        echo_log last $i was $(date -d @${last_backup_time}), backing up now
        update_time $i
        sync_first=$(get_option sync_first)
        [ $sync_first = "1" ] && $rsnapshot -c $conf sync
        $rsnapshot -c $conf $i
    fi
done
